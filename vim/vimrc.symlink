""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"	.vimrc
"	Rob Yurkowski
"	v 0.1
"	
"	For system and MacVim.
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call pathogen#infect('~/.dotfiles/vim/bundles-enabled') " Pathogen: a mod loader for Vim.  

set nocompatible " Disable vi compatibility mode -- enables advanced features (?)
syntax on " Do syntax highlighting
color molokai
set hidden " Allow buffer switch without save
set listchars=""
set listchars=tab:\ \ 
set listchars+=trail:.
set listchars+=extends:>
set listchars+=precedes:<

set number " Show line numbers
set ruler " Show line / column number

set encoding=utf-8 " Set default encoding to be utf-8
set nowrap " Default: don't wrap.
set tabstop=2 " Default tab-spacing
set shiftwidth=2 " Auto-indent size
set expandtab " Use spaces for tabs
set list " Show invisible characters
set smarttab " Insert tabs on the start of the line according to shiftwidth
set visualbell

set nobackup
set noswapfile
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Random Aliases
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Indent entire file.
nmap <leader>fef ggVG=

" Previous and next buffer.
nmap <silent> ,. :bnext<CR>
nmap <silent> ,m :bprev<CR>

" Toggle text wrap.
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" Correct arrow keys
map <Down> gj
map <Up> gk

nnoremap <leader>= yypVr=
nnoremap <leader>" 80i"<ESC>
nnoremap <leader># 80i#<ESC>

map <D-t> :LustyFilesystemExplorerFromHere

command BW :bn|:bd# " Close current buffer without closing window

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status-line stuff
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has("statusline") && !&cp
  set laststatus=2 " always show the status bar
  set noequalalways
  set statusline=%f\ %m\ %r
  
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=Col:%v
  set statusline+=Buf:#%n
  set statusline+=[%b][0x%B]
endif

""
" NerdTree
""

let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.class$', '\.o', '\~S', '\.sassc$', '\.scssc$']
let NERDTreeHijackNetrw = 0

augroup AuNERDTreeCmd
autocmd AuNERDTreeCmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()

" If the parameter is a directory, cd into it
function s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif

  if exists(":CommandTFlush") == 2
    CommandTFlush
  endif
endfunction

map <leader>n :NERDTreeToggle<CR>
